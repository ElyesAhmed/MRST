%% Example of connecting the well-region grid to Cartesian grid by the Voronoi grid
%
% This example demonstrates the use of Voronoi grid to connect the 
% well-region (WR) grid to Cartesian grid. The Voronoi grid is constructed
% by the combination of 'voronoin' (provide grid nodes and connectivity
% list) and 'tessellationGrid', before which five special treatments are 
% conducted, i.e. 
% * Designing the generating points, 
% * Clipping the Voronoi diagram, 
% * Removing conflicting points, 
% * Connecting with the WR grid, and
% * Connecting with the Cartesian grid.
%
%% Build the Cartesian grid
GC = cartGrid([25, 25], [200, 200]);
GC = computeGeometry(GC);
%% Define well trajectory and region of interest (ROI) boundary
% The well trajectory, should be located inside the ROI boundary.
ns = 12;
th = linspace(0.85, 0.7, ns+1)' * pi;
traj = [150*cos(th)+200, 150*sin(th)];
% The polygonal ROI boundary
pbdy = [136, 150;
        145,  95;
         90,  30;
         50,  50;
         45, 105;
         90, 160];
     
% Get cells inside and outside the ROI
cCtro = GC.cells.centroids;
in = inpolygon(cCtro(:,1), cCtro(:,2), pbdy(:,1), pbdy(:,2));
cI = find( in );
cO = find(~in );

% Extract the sorted boundary nodes and boundary cells (in 'counterclockwise').
% The actual ROI boundary is aligned to the grid edges (faces) and 
% therefore lead the nonconvex polygons. So, we first sort the convex 
% polygon specified by the centroids of boundary edges, and then obtain the 
% sorted boundary nodes and cells from associated faces.
[bnC, bcC] = extractBdyNodesCells(GC, cI);

% Plot the ROI boundary
figure, hold on, axis equal tight off
plotGrid(GC, cO, 'facecolor', 'none')
plotGrid(GC, cI, 'facecolor', 'y')
demoPlotLine(traj, 'ko-', 'b', 4)
demoPlotPoly(pbdy, 'k^-', 'r', 5)
demoPlotPoly(GC.nodes.coords(bnC,:), 'ks-', 'g', 4)
legend('GC outside the ROI', 'GC inside the ROI', 'Well path' ,...
    'Specified ROI boundary','Clipped ROI boundary')
%% Get the points and connectivity list of WR grid
% The WR grid is built along the well trajectory, consisting of a Cartesian
% region and two half-radial regions
% For the Cartesian region, the X axis extends along the well trajectory:
%     ---------> X
%    |    -----------------------------------
%  Y |    --------- Well trajectory ---------
%    V    -----------------------------------
% The number of Cartesian cells in Y direction
ny = 8;
% The size Cartesian region in Y direction
ly = 12;
% The number of angular cells in radial region
na = 6;
% Generate the WR grid points
pW0 = arrayfun(@(ii)pointsSingleWellNode(traj, ly, ny, na, ii), (1:ns+1)');
pW  = [vertcat(pW0.cart); vertcat(pW0.rad)];
% Make sure all well-region points are located inside the VOI
assert( all(inpolygon(pW(:,1), pW(:,2), GC.nodes.coords(bnC,1), ...
    GC.nodes.coords(bnC,2))) );
% Get the connectivity list and boundary nodes
[tW, ~, bnW] = getConnListAndBdyNodeWR2D(pW0, ny, na);
% Build the WR grid
GW = tessellationGrid(pW, tW);

figure, hold on, axis equal tight off
plotGrid(GC, cO, 'facecolor', 'none')
plotGrid(GW, 'facecolor', [.0, .44, .74])
demoPlotPoly(GC.nodes.coords(bnC, :), 'ks-', 'g', 4)
demoPlotPoly(pW(bnW, :), 'ko-', 'y', 3)
legend('GC outside the ROI', 'GW (WR grid)', 'ROI boundary' ,'WR boundary')
%% Design the generating points
% The Voronoi grid is built within the region between the outer boundary 
% (ROI boundary) and inner boundary (WR grid boundary), namely transition 
% region (TR) here. The nodes of the Voronoi grid should locate the nodes 
% of outer and inner boundaries. Therefore, the generating points should be
% designed. Here, the generating point set consist of the basic point set 
% and the auxiliary point set.

% The basic points are generated by 'Distmesh' within the reduced TR. The 
% outer boundary of reduced TR is specified by the centroids of boundary 
% cells (bcC), and the inner-boundary is specified the intersection points 
% (outside the WR grid) of circumcircles of the WR boundary nodes.

% The boundaries TR
pob  = GC.nodes.coords(bnC,:);
pib  = pW(bnW, :);
% The boundaries of reduced TR
pob2 = GC.cells.centroids(bcC, :);
[pIn, pOut, R] = demoComputeAuxPts(pW, bnW, 0.35);
pib2 = pOut;
% Plot the boundaries
figure, hold on, axis equal tight off
demoPlotPoly(pob,  'ks-', 'g', 4)
demoPlotPoly(pib,  'ko-', 'y', 3)
demoPlotPoly(pob2, 'ks-', 'r', 4)
demoPlotPoly(pib2, 'ko-', 'b', 3)
legend('Outer boundary of TR' ,'Inner boundary of TR', ...
    'Outer boundary of reduced TR' ,'Inner boundary of reduced TR')
% Generate basic points by 'Distmesh'
[pdis, tdis] = passToDistmesh(pib2, pob2, 0.2, 500, 'pIBRadius', R);

% The auxiliary points consist of the centroids of the Cartesian cells
% outside the ROI and the intersection points (inside the WR grid) of 
% circumcircles of the WR boundary nodes.
