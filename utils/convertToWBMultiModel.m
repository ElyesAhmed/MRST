function test = convertToWBMultiModel(test, varargin)

    opt = struct('name', []);
    [opt, varargin] = merge_options(opt, varargin{:});
    if isempty(opt.name), opt.name = [test.name, '_wb']; end
    
    fluidModel    = test.model;
    W = test.schedule.control(1).W;
    wellboreModel = WellboreModel(fluidModel, W, varargin{:});
    model = MultiPhysicsModel({fluidModel, wellboreModel}, ...
                              'names', {'Reservoir', 'Wellbore'});
                          
                          
    coupling = WellboreReservoirComponentFlux(model, 'Wellbore', 'Reservoir', ...
                'couplings', ...
                { ...
                    struct( ...
                        'model'    , 'Reservoir', ...
                        'equations', {{'H2O'}}    , ...
                        'subset'   , wellboreModel.getGlobalWellCells, ...
                        'sign'     , -1                       ...
                    ), ...
                    struct( ...
                        'model'    , 'Wellbore', ...
                        'equations', {{'H2O'}}    , ...
                        'subset'   , wellboreModel.G.cells.type == 0, ...
                        'sign'     , 1                      ...
                    ), ...
                } ...
            );
    model = model.setCouplingTerm(coupling);

    coupling = WellboreReservoirHeatFlux(model, 'Wellbore', 'Reservoir', ...
                'couplings', ...
                { ...
                    struct( ...
                        'model'    , 'Reservoir', ...
                        'equations', {{'energy'}}    , ...
                        'subset'   , wellboreModel.getGlobalWellCells, ...
                        'sign'     , -1                       ...
                    ), ...
                    struct( ...
                        'model'    , 'Wellbore', ...
                        'equations', {{'energy'}}    , ...
                        'subset'   , wellboreModel.G.cells.type == 0, ...
                        'sign'     , 1                      ...
                    ), ...
                } ...
            );
    model = model.setCouplingTerm(coupling);
                          
    state0 = struct();
    if isfield(test.state0, 'wellSol')
        test.state0 = rmfield(test.state0, 'wellSol');
    end
    [state0.Reservoir, state0.Wellbore] = deal(test.state0);
    wc = wellboreModel.G.cells.global;
    state0.Wellbore.pressure = state0.Wellbore.pressure(wc);
    state0.Wellbore.s        = state0.Wellbore.s(wc);
    state0.Wellbore.T        = state0.Wellbore.T(wc);
    
    schedule = test.schedule;
    control = schedule.control;
    for i = 1:numel(control)
        [rctrl, wctrl] = deal(control(i));
        [rctrl.W, rctrl.groups] = deal([]);
        if ~isfield(rctrl, 'bc' ), rctrl.bc  = []; end
        if ~isfield(rctrl, 'src'), rctrl.src = []; end
        [wctrl.bc, wctrl.src] = deal([]);
        schedule.control(i).Reservoir = rctrl;
        schedule.control(i).Wellbore = wctrl;
    end
    if isfield(schedule.control, 'W')
        schedule.control = rmfield(schedule.control, 'W');
    end
    if isfield(schedule.control, 'src')
        schedule.control = rmfield(schedule.control, 'src');
    end
    if isfield(schedule.control, 'bc')
        schedule.control = rmfield(schedule.control, 'bc');
    end
    if isfield(schedule.control, 'groups')
        schedule.control = rmfield(schedule.control, 'groups');
    end
    
    test.state0 = state0;
    test.model = model;
    test.schedule = schedule;
    
    test.name = opt.name;
    test.visualizationGrid = model.submodels.Reservoir.G;
    
end