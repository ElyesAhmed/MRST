%{
This example set up a poro elastic problem 
%}
%{
Copyright 2009-2014 SINTEF ICT, Applied Mathematics
%}
% more examples can be generated by squareTest.m, see also
% overburde_2d_example which uses this tests
%% Define parameters
opt=struct('L',[1 1],...
    'cartDims',[10 10]*3,...
    'grid_type','cartgrid',...
    'disturb',0.0,... %parameter for disturbing grid
    'E',1e9,...  %youngs modolo
    'nu',0.3);% poiso ratio

%% define Grid
G=squareGrid(opt.cartDims,opt.L,'grid_type',opt.grid_type,'disturb',opt.disturb);
G=computeGeometry(G)
figure()
clf,plotGrid(G)
%% Find sides of domain
% find sides
oside={'Left','Right','Back','Front'};
bc=cell(4,1);
for i=1:numel(oside);
    faces=G.cells.faces((G.cells.faces(:,2)==i),1);
    faces =faces(sum(G.faces.neighbors(faces,:)>0,2)==1);
    assert(all(sum(G.faces.neighbors(faces,:)>0,2)==1));
    bc{i}=addBC([],faces,'pressure',0);
end
% finde node of the differens sides and prepare elastisity boundary
% conditions
for i=1:4
    inodes=mcolon(G.faces.nodePos(bc{i}.face),G.faces.nodePos(bc{i}.face+1)-1);
    nodes=unique(G.faces.nodes(inodes));
    disp_bc=struct('nodes',nodes,...
        'uu',0,...
        'faces',bc{i}.face,...
        'uu_face',0,...
        'mask',true(numel(nodes),G.griddim));
    bc{i}.el_bc=struct('disp_bc', disp_bc,'force_bc',[]);
end
%% define load as gravity
density=3000;% kg/m^3
grav=0;% gravity
load=@(x) -(grav*density)*repmat([0,1],size(x,1),1);
% set boundary dispace ment function to zeros
bcdisp=@(x) x*0.0;


% set up boundary conditions for each side
clear bc_el_sides
% set direclet boundary conditions at selected sides
% on left side node displace ment in x direction only, this is done by
% mask
bc_el_sides{1}=bc{1};
bc_el_sides{1}.el_bc.disp_bc.mask(:,2)=false;
% same as x direction
bc_el_sides{2}=bc{2};
bc_el_sides{2}.el_bc.disp_bc.mask(:,2)=false;
% no displace ment in y direction at the bottum
bc_el_sides{3}=bc{3};
bc_el_sides{3}.el_bc.disp_bc.mask(:,1)=false;
bc_el_sides{4}=[];
% remove

% collect bounary conditions
nodes=[];
faces=[];
mask=[];
for i=1:numel(bc)
    if(~isempty(bc_el_sides{i}))
        nodes=[nodes;bc_el_sides{i}.el_bc.disp_bc.nodes];%#ok
        faces=[faces;bc_el_sides{i}.el_bc.disp_bc.faces];%#ok
        mask=[mask;bc_el_sides{i}.el_bc.disp_bc.mask];%#ok
    end
end
disp_node=bcdisp(G.nodes.coords(nodes,:));
disp_faces=bcdisp(G.faces.centroids(faces,:));
disp_bc=struct('nodes',nodes,'uu',disp_node,'faces',faces,'uu_face',disp_faces,'mask',mask);
% define forces at boundary
sigma=opt.L(2)/10;force=100*barsa;
face_force =@(x) force*ones(size(x,1),1);
faces=bc{4}.face;
% make force boundary structure NB force is in units Pa/m^3
force_bc=struct('faces',faces,'force',bsxfun(@times,face_force(G.faces.centroids(faces,:)),[0 -1]));
% final structure fo boundary conditions
el_bc=struct('disp_bc',disp_bc,'force_bc',force_bc);


%% define rock parameters
Ev=repmat(opt.E,G.cells.num,1);nuv=repmat(opt.nu,G.cells.num,1);

% solve linear elastic system
C=Enu2C(Ev,nuv,G);
[uu,extra]=VEM_linElast(G,C,el_bc,load);
As=extra.disc.A;
gradP=extra.disc.gradP;
div=extra.disc.div;
isdirdofs=extra.disc.isdirdofs;
rhs_s=extra.disc.rhs;
Vdir=extra.disc.V_dir;
ind_s=[1:size(As,1)]';%#ok


% find discretizationin of flow
perm=1e-1*darcy*ones(G.cells.num,1);
rock=struct('perm',reshape(perm,[],1),'poro',0.1*ones(G.cells.num,1),'alpha',ones(G.cells.num,1));
fluid=initSingleFluid('mu',1*centi*poise,'rho',1000);
fluid.cr=1e-5/barsa;
% set time steps
dt=0.1e-3;

W=[]; % no wells
bc_f=bc{4}; % set fluid boudnary conditions on only top

%% define problem probelm an run it in the solver
problem=struct('G',G,'W',W,'bc_f',bc_f,'fluid',fluid,'rock',rock,...
    'C',C,'el_bc',el_bc,'load',load,'src',[]);
% use Ev an muv for now
pressure=1*barsa*ones(G.cells.num,1);
% set initial pressure
uu0=zeros(size(uu));
% define init states
state0=struct('pressure',pressure,'s',ones(G.cells.num,1),'flux',zeros(G.faces.num,1),'uu',uu0);
% define schedule
schedule=struct('step',struct('val',dt*ones(10,1)));

%% Solve Poro elastic problem
%
states=poroElastisityLinear(state0,G,problem,schedule,'do_plot',false);
%%
figure(1),clf,
fac=10;% plot deformed grid with a factor 10 for dispalcement compeared with initial state
for i=1:numel(states)
    %clf,plotCellDataDeformed(G,states{i}.pressure/barsa,states{i}.uu*fac),colorbar
    clf,plotCellDataDeformed(G,states{i}.pressure/barsa,state0.uu+(states{i}.uu-state0.uu)*fac);colorbar
    title(['Time', num2str(states{i}.t/day),' dayes'])
    pause(0.1)
end

%%
figure(33)
yn=G.nodes.coords(:,end);
yc=G.cells.centroids(:,end);
for i=1:numel(states)
    clf,plot(yc,states{i}.pressure/barsa,'*');
    
end




