%% Upper bound trapping capacities: Norwegian Continental Shelf formations

%% Specify the formations to study
% We list the formations explicity since some formations are sealing or its
% grid may not be generated by getAtlasGrid()

%names = [getNorwegianSeaNames() getBarentsSeaNames()];
names = {'Garnfm';'Ilefm';'Tiljefm';'Arefm'}; N = 1;
%names = {'Stofm';'Tubaenfm';'Bjarmelandfm'}; N = 1;
% names = {'Brynefm';'Fensfjordfm';...
%             'Gassumfm';'Johansenfm';'Krossfjordfm';...
%             'Pliocenesand';'Sandnesfm';'Sleipnerfm';...
%             'Sognefjordfm';'Statfjordfm';'Ulafm';'Utsirafm'}; N = 1;
fmCapacities = cell(numel(names),1);
savePlot = true;
figDirName = 'mapPlots';
mkdir(figDirName);
rhoCref = 760 * kilogram/meter^3;

for i = 1:numel(names)
   
    [Gt, rock2D] = getFormationTopGrid(names{i}, N);
    seainfo      = getSeaInfo(names{i}, rhoCref);
    fmCapacities{i} = getTrappingInfo(Gt, rock2D, seainfo, 'mapPlotOn',true, 'fmName',names{i});
    
    if savePlot
        title(names{i})
        export_fig(gcf,[figDirName '/' names{i} '_ref',num2str(N)], '-png','-transparent')
        close
    end
end


%% Create table of trapping output

fprintf('Name & Structural & Residual & Dissolved & Total in Gt \\\\ \n')
for i = 1:numel(names)
    
    x = fmCapacities{i}.breakdown;
    fprintf('%15s & %8.2f (%5.1f) & %8.2f (%5.1f) & %8.2f (%5.1f) & %8.2f \\\\ \n', names{i}, ...
        x.structural_trapping_capacity, (x.structural_trapping_capacity/x.total_trapping_capacity)*100, ...
        x.residual_trapping_capacity, (x.residual_trapping_capacity/x.total_trapping_capacity)*100, ...
        x.dissolved_trapping_capacity, (x.dissolved_trapping_capacity/x.total_trapping_capacity)*100, ...
        x.total_trapping_capacity );
    
end
    
%% Create table of parameter values used to compute trapping capacities

info = getSeaInfo('NorwegianSea', 760 * kilogram/meter^3);

fprintf('Norwegian Sea Parameter Values \n')
fprintf('Parameter                  & Value     & Unit & Reference \\\\ \n')
fprintf('Sea depth                  & %d        & meter & \\\\ \n', getfield(info,'seafloor_depth')*meter)
fprintf('Injection depth            & %d        &       & \\\\ \n', [])
fprintf('Thermal gradient           & %4.1f     & C/km  & \\\\ \n', getfield(info,'temp_gradient'))
fprintf('Seabed temperature         & %d        & C     & \\\\ \n', getfield(info,'seafloor_temp'))
fprintf('Residual water saturation  & %4.2f     &       & \\\\ \n', getfield(info,'res_sat_wat'))
fprintf('Residual {\\co} saturation  & %4.2f     &       & \\\\ \n', getfield(info,'res_sat_co2'))
fprintf('Rock porosity              & %d        &       & \\\\ \n', [])
fprintf('Rock net-to-gross          & %d        &       & \\\\ \n', [])
fprintf('Water density              & %d        & kg/m^3 & \\\\ \n', getfield(info,'water_density')*kilogram/meter^3)
fprintf('{\\co} solubility in brine  & %d        & kg/m^3 & \\\\ \n', getfield(info,'co2_solubility')*kilogram/meter^3)


info = getSeaInfo('BarentsSea', 760 * kilogram/meter^3);

fprintf('Barents Sea Parameter Values \n')
fprintf('Parameter                  & Value     & Unit & Reference \\\\ \n')
fprintf('Sea depth                  & %d        & meter & \\\\ \n', getfield(info,'seafloor_depth')*meter)
fprintf('Injection depth            & %d        &       & \\\\ \n', [])
fprintf('Thermal gradient           & %4.1f     & C/km  & \\\\ \n', getfield(info,'temp_gradient'))
fprintf('Seabed temperature         & %d        & C     & \\\\ \n', getfield(info,'seafloor_temp'))
fprintf('Residual water saturation  & %4.2f     &       & \\\\ \n', getfield(info,'res_sat_wat'))
fprintf('Residual {\\co} saturation  & %4.2f     &       & \\\\ \n', getfield(info,'res_sat_co2'))
fprintf('Rock porosity              & %d        &       & \\\\ \n', [])
fprintf('Rock net-to-gross          & %d        &       & \\\\ \n', [])
fprintf('Water density              & %d        & kg/m^3 & \\\\ \n', getfield(info,'water_density')*kilogram/meter^3)
fprintf('{\\co} solubility in brine  & %d        & kg/m^3 & \\\\ \n', getfield(info,'co2_solubility')*kilogram/meter^3)

%% Average rock properties of formations
fprintf('Name & Avg Poro (max,min) & Avg Perm (max,min) [mD] & Avg NTG (max,min) \n')
for i = 1:numel(names)
   
    r       = fmCapacities{i}.rock2D;
    r.perm  = convertTo(r.perm, milli*darcy);
    if ~isfield(r,'ntg')
        r.ntg = [];
    end
    fprintf('%16s  & %4.2f (%4.2f, %4.2f)  & %3.0f (%3.0f, %3.0f)  & %4.2f (%4.2f, %4.2f) \\\\ \n', names{i}, ...
        mean(r.poro), max(r.poro), min(r.poro), ...
        mean(r.perm), max(r.perm), min(r.perm), ...
        mean(r.ntg),  max(r.ntg),  min(r.ntg) );
    
end



