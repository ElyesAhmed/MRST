<?xml version="1.0" encoding="utf-8"?>
<mscript xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <version>9.5</version>
   <release>2018b</release>
   <date>2020-06-03</date>
   <cell>
      <count>1</count>
      <steptitle>Read ECLIPSE output and visualize</steptitle>
      <text>
         <p>This example reads ECLIPSE unformatted output files from a simulation based on the SPE9 benchmark. The MRST grid structure (G) is generated using output from *.INIT and *.EGRID. Unconverted grid properties from *INIT and *UNRST (restart data) are plotted using plotToolBar. Summary data (*UNSMRY) is read and inspected.</p>
      </text>
      <mcode>mrstModule add mrst-gui

if ~ makeSPE9OutputAvailable
   error('SPE9Download:Failure', ...
         'Failed to download ECLIPSE output for SPE-9 benchmark case');
end

prefix = fullfile(getDatasetPath('spe9'), 'Simulation-Output', 'SPE9_CP');</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">mrstModule <mwsh:strings xml:space="preserve">add</mwsh:strings> <mwsh:strings xml:space="preserve">mrst-gui</mwsh:strings>

<mwsh:keywords xml:space="preserve">if</mwsh:keywords> ~ makeSPE9OutputAvailable
   error(<mwsh:strings xml:space="preserve">'SPE9Download:Failure'</mwsh:strings>, <mwsh:keywords xml:space="preserve">...</mwsh:keywords>
         <mwsh:strings xml:space="preserve">'Failed to download ECLIPSE output for SPE-9 benchmark case'</mwsh:strings>);
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

prefix = fullfile(getDatasetPath(<mwsh:strings xml:space="preserve">'spe9'</mwsh:strings>), <mwsh:strings xml:space="preserve">'Simulation-Output'</mwsh:strings>, <mwsh:strings xml:space="preserve">'SPE9_CP'</mwsh:strings>);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>1</mcode-count>
      <cellOutputTarget>1</cellOutputTarget>
   </cell>
   <cell>
      <count>2</count>
      <steptitle>Read INIT/EGRID-files and construct MRST-grid</steptitle>
      <mcode>init  = readEclipseOutputFileUnFmt([prefix, '.INIT']);
egrid = readEclipseOutputFileUnFmt([prefix, '.EGRID']);
[G, rock] = eclOut2mrst(init, egrid);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">init  = readEclipseOutputFileUnFmt([prefix, <mwsh:strings xml:space="preserve">'.INIT'</mwsh:strings>]);
egrid = readEclipseOutputFileUnFmt([prefix, <mwsh:strings xml:space="preserve">'.EGRID'</mwsh:strings>]);
[G, rock] = eclOut2mrst(init, egrid);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>2</mcode-count>
      <cellOutputTarget>2</cellOutputTarget>
   </cell>
   <cell>
      <count>3</count>
      <steptitle>Plot (unconverted) init data compatible with the grid (G)</steptitle>
      <mcode>figure, plotToolbar(G, init);
axis off vis3d tight, view([1 -1.5 .3]), camproj perspective</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">figure, plotToolbar(G, init);
axis <mwsh:strings xml:space="preserve">off</mwsh:strings> <mwsh:strings xml:space="preserve">vis3d</mwsh:strings> <mwsh:strings xml:space="preserve">tight</mwsh:strings>, view([1 -1.5 .3]), camproj <mwsh:strings xml:space="preserve">perspective</mwsh:strings></mwsh:code>
      </mcode-xmlized>
      <mcode-count>3</mcode-count>
      <cellOutputTarget>3</cellOutputTarget>
      <img src="readAndVisualizeEclipseOutput_01.png"/>
   </cell>
   <cell>
      <count>4</count>
      <steptitle>Read and plot (unconverted) restart data compatible with the grid (G)</steptitle>
      <text>
         <p>By first reading the restart specification file, we may choose to read only portions of the restart data. Here er read all data for for time-steps 1 through 20.</p>
      </text>
      <mcode>spec  = processEclipseRestartSpec(prefix, 'all');
steps = 1:20;
rstrt = readEclipseRestartUnFmt(prefix, spec, steps);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">spec  = processEclipseRestartSpec(prefix, <mwsh:strings xml:space="preserve">'all'</mwsh:strings>);
steps = 1:20;
rstrt = readEclipseRestartUnFmt(prefix, spec, steps);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>4</mcode-count>
      <cellOutputTarget>4</cellOutputTarget>
   </cell>
   <cell>
      <count>5</count>
      <text>
         <p>The data-arrangement in rstrt is not compatible with plotToolbar, hence we need to rearrage the data as a struct-array. At the same time we only pick data that matches the number of grid cells.</p>
      </text>
      <mcode>ix = structfun(@(x)numel(x{1}) == G.cells.num, rstrt);
f  = fieldnames(rstrt); f = f(ix);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">ix = structfun(@(x)numel(x{1}) == G.cells.num, rstrt);
f  = fieldnames(rstrt); f = f(ix);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>5</mcode-count>
      <cellOutputTarget>5</cellOutputTarget>
   </cell>
   <cell>
      <count>6</count>
      <text>
         <p>Rearrange restart-data to array of structures for plotting</p>
      </text>
      <mcode>data = cellfun(@(x)rstrt.(x), f, 'UniformOutput', false);
data = cell2struct(vertcat(data{:}), f, 1);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">data = cellfun(@(x)rstrt.(x), f, <mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>, false);
data = cell2struct(vertcat(data{:}), f, 1);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>6</mcode-count>
      <cellOutputTarget>6</cellOutputTarget>
   </cell>
   <cell>
      <count>7</count>
      <text>
         <p>Plot selected restart data</p>
      </text>
      <mcode>figure, plotToolbar(G, data);
axis off vis3d tight, view([1, -1.5, 0.3]), camproj perspective</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">figure, plotToolbar(G, data);
axis <mwsh:strings xml:space="preserve">off</mwsh:strings> <mwsh:strings xml:space="preserve">vis3d</mwsh:strings> <mwsh:strings xml:space="preserve">tight</mwsh:strings>, view([1, -1.5, 0.3]), camproj <mwsh:strings xml:space="preserve">perspective</mwsh:strings></mwsh:code>
      </mcode-xmlized>
      <mcode-count>7</mcode-count>
      <cellOutputTarget>7</cellOutputTarget>
      <img src="readAndVisualizeEclipseOutput_02.png"/>
   </cell>
   <cell>
      <count>8</count>
      <steptitle>Read and inspect (unconverted) summary data</steptitle>
      <text>
         <p>The summary reader creates a struct smry containg all the data in an array accompanied by index-functions for extracting data for a given well/property/timestep. The reader requires both the *.UNSMRY and *.SMSPEC files.</p>
      </text>
      <mcode>smry = readEclipseSummaryUnFmt(prefix);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">smry = readEclipseSummaryUnFmt(prefix);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>8</mcode-count>
      <cellOutputTarget>8</cellOutputTarget>
   </cell>
   <cell>
      <count>9</count>
      <text>
         <p>Display names of all "wells" for which properties are recorded:</p>
      </text>
      <mcode>smry.WGNAMES</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">smry.WGNAMES</mwsh:code>
      </mcode-xmlized>
      <mcode-count>9</mcode-count>
      <cellOutputTarget>9</cellOutputTarget>
      <mcodeoutput class="codeoutput">
ans =

  28×1 cell array

    {':+:+:+:+'}
    {'FIELD'   }
    {'INJE1'   }
...</mcodeoutput>
   </cell>
   <cell>
      <count>10</count>
      <text>
         <p>The field with the expressive name ':+:+:+:+' contains ministep (simulator time-step) times given by the property 'TIME'. Request times of all (':') ministeps:</p>
      </text>
      <mcode>time = smry.get(':+:+:+:+', 'TIME', ':');
% Find property names ascossiated with the field 'FIELD'
smry.getKws('FIELD')</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">time = smry.get(<mwsh:strings xml:space="preserve">':+:+:+:+'</mwsh:strings>, <mwsh:strings xml:space="preserve">'TIME'</mwsh:strings>, <mwsh:strings xml:space="preserve">':'</mwsh:strings>);
<mwsh:comments xml:space="preserve">% Find property names ascossiated with the field 'FIELD'</mwsh:comments>
smry.getKws(<mwsh:strings xml:space="preserve">'FIELD'</mwsh:strings>)</mwsh:code>
      </mcode-xmlized>
      <mcode-count>10</mcode-count>
      <cellOutputTarget>10</cellOutputTarget>
      <mcodeoutput class="codeoutput">
ans =

  4×1 cell array

    {'FGOR'}
    {'FGPR'}
    {'FOPR'}
...</mcodeoutput>
   </cell>
   <cell>
      <count>11</count>
      <text>
         <p>Plot field oil production rate for all time steps</p>
      </text>
      <mcode>figure, plot(time, smry.get('FIELD', 'FOPR', ':'), 'LineWidth', 2);
xlabel('Time [days]'), ylabel('Field oil production rate [stb/day]');</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">figure, plot(time, smry.get(<mwsh:strings xml:space="preserve">'FIELD'</mwsh:strings>, <mwsh:strings xml:space="preserve">'FOPR'</mwsh:strings>, <mwsh:strings xml:space="preserve">':'</mwsh:strings>), <mwsh:strings xml:space="preserve">'LineWidth'</mwsh:strings>, 2);
xlabel(<mwsh:strings xml:space="preserve">'Time [days]'</mwsh:strings>), ylabel(<mwsh:strings xml:space="preserve">'Field oil production rate [stb/day]'</mwsh:strings>);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>11</mcode-count>
      <cellOutputTarget>11</cellOutputTarget>
      <img src="readAndVisualizeEclipseOutput_03.png"/>
   </cell>
   <cell>
      <count>12</count>
      <text>
         <p>
            <html text="&#xA;&lt;p&gt;&lt;font size=&#34;-1&#34;&gt;&#xA;Copyright 2009-2020 SINTEF Digital, Mathematics &amp; Cybernetics.&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font size=&#34;-1&#34;&gt;&#xA;This file is part of The MATLAB Reservoir Simulation Toolbox (MRST).&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font size=&#34;-1&#34;&gt;&#xA;MRST is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font size=&#34;-1&#34;&gt;&#xA;MRST is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font size=&#34;-1&#34;&gt;&#xA;You should have received a copy of the GNU General Public License&#xA;along with MRST.  If not, see&#xA;&lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses&lt;/a&gt;.&#xA;&lt;/font&gt;&lt;/p&gt;&#xA;">
&lt;p&gt;&lt;font size="-1"&gt;
Copyright 2009-2020 SINTEF Digital, Mathematics &amp; Cybernetics.
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="-1"&gt;
This file is part of The MATLAB Reservoir Simulation Toolbox (MRST).
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="-1"&gt;
MRST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="-1"&gt;
MRST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="-1"&gt;
You should have received a copy of the GNU General Public License
along with MRST.  If not, see
&lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses&lt;/a&gt;.
&lt;/font&gt;&lt;/p&gt;
</html>
         </p>
      </text>
      <cellOutputTarget>12</cellOutputTarget>
   </cell>
   <originalCode>%% Read ECLIPSE output and visualize
% This example reads ECLIPSE unformatted output files from a simulation
% based on the SPE9 benchmark. The MRST grid structure (G) is generated
% using output from *.INIT and *.EGRID. Unconverted grid properties from
% *INIT and *UNRST (restart data) are plotted using plotToolBar. Summary
% data (*UNSMRY) is read and inspected.

mrstModule add mrst-gui

if ~ makeSPE9OutputAvailable
   error('SPE9Download:Failure', ...
         'Failed to download ECLIPSE output for SPE-9 benchmark case');
end

prefix = fullfile(getDatasetPath('spe9'), 'Simulation-Output', 'SPE9_CP');

%% Read INIT/EGRID-files and construct MRST-grid
init  = readEclipseOutputFileUnFmt([prefix, '.INIT']);
egrid = readEclipseOutputFileUnFmt([prefix, '.EGRID']);
[G, rock] = eclOut2mrst(init, egrid);

%% Plot (unconverted) init data compatible with the grid (G)
figure, plotToolbar(G, init);
axis off vis3d tight, view([1 -1.5 .3]), camproj perspective

%% Read and plot (unconverted) restart data compatible with the grid (G)
% By first reading the restart specification file, we may choose to read
% only portions of the restart data. Here er read all data for for
% time-steps 1 through 20.

spec  = processEclipseRestartSpec(prefix, 'all');
steps = 1:20;
rstrt = readEclipseRestartUnFmt(prefix, spec, steps);

%%
% The data-arrangement in rstrt is not compatible with plotToolbar, hence
% we need to rearrage the data as a struct-array. At the same time we only
% pick data that matches the number of grid cells.
ix = structfun(@(x)numel(x{1}) == G.cells.num, rstrt);
f  = fieldnames(rstrt); f = f(ix);

%%
% Rearrange restart-data to array of structures for plotting
data = cellfun(@(x)rstrt.(x), f, 'UniformOutput', false);
data = cell2struct(vertcat(data{:}), f, 1);

%%
% Plot selected restart data
figure, plotToolbar(G, data);
axis off vis3d tight, view([1, -1.5, 0.3]), camproj perspective

%% Read and inspect (unconverted) summary data
% The summary reader creates a struct smry containg all the data in an
% array accompanied by index-functions for extracting data for a given
% well/property/timestep. The reader requires both the *.UNSMRY and
% *.SMSPEC files.

smry = readEclipseSummaryUnFmt(prefix);

%%
% Display names of all "wells" for which properties are recorded:

smry.WGNAMES

%%
% The field with the expressive name ':+:+:+:+' contains ministep 
% (simulator time-step) times given by the property 'TIME'. 
% Request times of all (':') ministeps: 
time = smry.get(':+:+:+:+', 'TIME', ':');
% Find property names ascossiated with the field 'FIELD'
smry.getKws('FIELD')

%%
% Plot field oil production rate for all time steps
figure, plot(time, smry.get('FIELD', 'FOPR', ':'), 'LineWidth', 2);
xlabel('Time [days]'), ylabel('Field oil production rate [stb/day]');

%%
% &lt;html&gt;
% &lt;p&gt;&lt;font size="-1"&gt;
% Copyright 2009-2020 SINTEF Digital, Mathematics &amp; Cybernetics.
% &lt;/font&gt;&lt;/p&gt;
% &lt;p&gt;&lt;font size="-1"&gt;
% This file is part of The MATLAB Reservoir Simulation Toolbox (MRST).
% &lt;/font&gt;&lt;/p&gt;
% &lt;p&gt;&lt;font size="-1"&gt;
% MRST is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% &lt;/font&gt;&lt;/p&gt;
% &lt;p&gt;&lt;font size="-1"&gt;
% MRST is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% &lt;/font&gt;&lt;/p&gt;
% &lt;p&gt;&lt;font size="-1"&gt;
% You should have received a copy of the GNU General Public License
% along with MRST.  If not, see
% &lt;a href="http://www.gnu.org/licenses/"&gt;http://www.gnu.org/licenses&lt;/a&gt;.
% &lt;/font&gt;&lt;/p&gt;
% &lt;/html&gt;
</originalCode>
   <m-file>readAndVisualizeEclipseOutput</m-file>
   <filename>/home/francesca/mrst-bitbucket/mrst-model-io/deckformat/examples/readAndVisualizeEclipseOutput.m</filename>
   <outputdir>/home/francesca/mrst-bitbucket/mrst-model-io/deckformat/examples/html</outputdir>
</mscript>