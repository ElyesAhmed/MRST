From 2deced0ce4333b7ba9ef3fd5f209042db5af20d7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Olav=20M=C3=B8yner?= <olav.moyner@sintef.no>
Date: Wed, 27 Mar 2019 13:09:15 +0100
Subject: [PATCH] solvent: Fixes to avoid value warnings + a fix for missing AD
 in function

---
 models/BlackOilSolventModel.m     | 12 ++++++------
 models/equationsBlackOilSolvent.m | 12 ++++++------
 utils/addSolventProperties.m      |  8 +++++++-
 utils/getFluxAndPropsSolvent.m    |  8 ++++----
 utils/plotSolventFluidProps.m     | 12 ++++++------
 5 files changed, 29 insertions(+), 23 deletions(-)

diff --git a/models/BlackOilSolventModel.m b/models/BlackOilSolventModel.m
index 38eb826..4507149 100644
--- a/models/BlackOilSolventModel.m
+++ b/models/BlackOilSolventModel.m
@@ -44,14 +44,14 @@ function model = validateModel(model, varargin)
         end
 
         % --------------------------------------------------------------------%
-        function [fn, index] = getVariableField(model, name)
+        function [fn, index] = getVariableField(model, name, varargin)
             switch(lower(name))
                 case {'solvent', 'ss'}
                     index = 4;
                     fn = 's';
                 otherwise
                     % Basic phases are known to the base class
-                    [fn, index] = getVariableField@ThreePhaseBlackOilModel(model, name);
+                    [fn, index] = getVariableField@ThreePhaseBlackOilModel(model, name, varargin{:});
             end
         end
 
@@ -200,7 +200,7 @@ function state = storeFluxes(model, state, vW, vO, vG, vS)
 
             internal = model.operators.internalConn;
             state.flux = zeros(numel(internal), sum(isActive));
-            phasefluxes = {double(vW), double(vO), double(vG), double(vS)};
+            phasefluxes = {value(vW), value(vO), value(vG), value(vS)};
             state = model.setPhaseData(state, phasefluxes, 'flux', internal);
         end
 
@@ -210,7 +210,7 @@ function state = storeMobilities(model, state, mobW, mobO, mobG, mobS)
             isActive = model.getActivePhases();
 
             state.mob = zeros(model.G.cells.num, sum(isActive));
-            mob = {double(mobW), double(mobO), double(mobG), double(mobS)};
+            mob = {value(mobW), value(mobO), value(mobG), value(mobS)};
             state = model.setPhaseData(state, mob, 'mob');
         end
 
@@ -233,7 +233,7 @@ function state = storeDensity(model, state, rhoW, rhoO, rhoG, rhoS)
             isActive = model.getActivePhases();
 
             state.rho = zeros(model.G.cells.num, sum(isActive));
-            rho = {double(rhoW), double(rhoO), double(rhoG), double(rhoS)};
+            rho = {value(rhoW), value(rhoO), value(rhoG), value(rhoS)};
             state = model.setPhaseData(state, rho, 'rho');
         end
 
@@ -244,7 +244,7 @@ function state = storebfactors(model, state, bW, bO, bG, bS)
             isActive = model.getActivePhases();
 
             state.bfactor = zeros(model.G.cells.num, sum(isActive));
-            b = {double(bW), double(bO), double(bG), double(bS)};
+            b = {value(bW), value(bO), value(bG), value(bS)};
             state = model.setPhaseData(state, b, 'bfactor');
         end
     end
diff --git a/models/equationsBlackOilSolvent.m b/models/equationsBlackOilSolvent.m
index 626ee3b..c97d1d2 100644
--- a/models/equationsBlackOilSolvent.m
+++ b/models/equationsBlackOilSolvent.m
@@ -233,14 +233,14 @@ function [problem, state] = equationsBlackOilSolvent(state0, state, model, dt, d
     flux(:,4)    = op.Div(bSvS);
     state.flux   = flux;
     
-    state.mu = [double(muW), double(muO), double(muG), double(muS)];
-    state.kr = [double(krW), double(krO), double(krG), double(krS)];
+    state.mu = [value(muW), value(muO), value(muG), value(muS)];
+    state.kr = [value(krW), value(krO), value(krG), value(krS)];
     
 end
 
-state.sr = [double(sOr), double(sGc)];
-state.sOr = double(sOr);
-state.sGc = double(sGc);
+state.sr = [value(sOr), value(sGc)];
+state.sOr = value(sOr);
+state.sGc = value(sGc);
 
 
 eqs   = {water, oil, gas, solvent};
@@ -268,7 +268,7 @@ function varargout = getWellValue(wellCells, varargin)
     
     for i = 1:numel(varargin)
         v = varargin{i};
-        if numel(double(v)) == 1
+        if numel(value(v)) == 1
             varargout{i} = v;
         else
             varargout{i} = v(wellCells);
diff --git a/utils/addSolventProperties.m b/utils/addSolventProperties.m
index 928475b..df31066 100644
--- a/utils/addSolventProperties.m
+++ b/utils/addSolventProperties.m
@@ -125,9 +125,15 @@ function fluid = assignProp(fluid, name, value, type, overwrite)
 end
 
 function F = satFrac(sX, sY, smin)
-
     F     = sX;
     ii    = sX + sY > smin;
+    if isnumeric(F) && isa(sY, 'ADI')
+        if isa(sY, 'NewAD')
+            F = double2NewAD(F, sY);
+        else
+            F = double2ADI(F, sY);
+        end
+    end
     F(ii) = sX(ii)./sY(ii);
     F = min(max(F, 0),1);
     
diff --git a/utils/getFluxAndPropsSolvent.m b/utils/getFluxAndPropsSolvent.m
index e461cf3..39f15d5 100644
--- a/utils/getFluxAndPropsSolvent.m
+++ b/utils/getFluxAndPropsSolvent.m
@@ -30,14 +30,14 @@ function [vW, vO, vG, vS, mobW, mobO, mobG, mobS, upcW, upcO, upcG, upcS] = getF
     mobW   = krW./muW;
     dpW    = op.Grad(pW) - rhoWf.*gdz;
     % water upstream-index
-    upcW  = (double(dpW)<=0);
+    upcW  = (value(dpW)<=0);
     vW = -op.faceUpstr(upcW, mobW).*T.*dpW;
     
     rhoOf  = op.faceAvg(rhoO);
     mobO   = krO./muO;
     dpO    = op.Grad(pO) - rhoOf.*gdz;
     % oil upstream-index
-    upcO = (double(dpO)<=0);
+    upcO = (value(dpO)<=0);
     vO   = - op.faceUpstr(upcO, mobO).*T.*dpO;
     
     pcOG = 0;
@@ -54,14 +54,14 @@ function [vW, vO, vG, vS, mobW, mobO, mobG, mobS, upcW, upcO, upcG, upcS] = getF
     mobG  = krG./muG;
     dpG   = op.Grad(pG) - rhoGf.*gdz;
     % gas upstream-index
-    upcG  = (double(dpG)<=0);
+    upcG  = (value(dpG)<=0);
     vG    = - op.faceUpstr(upcG, mobG).*T.*dpG;
     
     rhoSf  = op.faceAvg(rhoS);
     mobS   = krS./muS;
     dpS    = op.Grad(pS) - rhoSf.*gdz;
     % solvent upstream-index
-    upcS    = (double(dpS)<=0);
+    upcS    = (value(dpS)<=0);
     vS = - op.faceUpstr(upcS, mobS).*T.*dpS;
     
     
diff --git a/utils/plotSolventFluidProps.m b/utils/plotSolventFluidProps.m
index 7f88bf2..727a0f2 100644
--- a/utils/plotSolventFluidProps.m
+++ b/utils/plotSolventFluidProps.m
@@ -91,14 +91,14 @@ function [sor, sgc] = solveSr(fluid, p)
     
     tol = 1e-10;
     eqs = fun(sor);
-    err = norm(double(eqs), inf);
+    err = norm(value(eqs), inf);
     while err > tol
         
         dsr = -eqs.jac{1}\eqs.val;
         sor = sor + dsr;
         
         eqs = fun(sor);
-        err = norm(double(eqs), inf);
+        err = norm(value(eqs), inf);
         
     end
     
@@ -110,18 +110,18 @@ function [sor, sgc] = solveSr(fluid, p)
     sgc = initVariablesADI(fluid.sGc_i*ones(n,1));
     
     eqs = fun(sgc);
-    err = norm(double(eqs), inf);
+    err = norm(value(eqs), inf);
     while err > tol
         
         dsc = -eqs.jac{1}\eqs.val;
         sgc = sgc + dsc;
         
         eqs = fun(sgc);
-        err = norm(double(eqs), inf);
+        err = norm(value(eqs), inf);
         
     end
-    
-    
+    sor = value(sor);
+    sgc = value(sgc);
 end
                  
                  
-- 
2.17.1

