       %initState solves the chemical system using the specified input and
        % information inside of the already defined state.
        %
        % SYNOPSIS:
        %  [state, report, model] = initState(model, userInput, varargin)
        %
        % DESCRIPTION:
        %   A function used to solve the chemical system generated by
        %   ChemModel according to constraints given in userInput. 
        %
        % REQUIRED PARAMETERS:
        %   userInput        - A matrix containing the values of elements
        %       or species specified as inputs during the generation of the
        %       chemical system using ChemModel. userInput must have as
        %       mnay columns as there are specified knowns, which is equal
        %       to the number of entries in elements. 
        %           
        %
        % OPTIONAL PARAMETERS:
        %   state            - A structure containg information about the
        %       physical model. Currently the only relevant information for 
        %       the chemical system is state.temperature. This is an
        %       optional parameter, when not provided temperature is
        %       assumed to be 298 K. Should be given as a 'key'/value pair.
        %
        %           state.temperature = 170*Kelvin;
        %           
        %           state = model.initState(userInput, 'state', state)
        %
        %   chargeBalance   - This input toggles the enforcment of strict
        %       charge balance. A master component must be specified. If
        %       charge balance is not satisfied with the given constraint
        %       the solver will adjust the total concentration of the
        %       specified element to enforce charge balance. chargeBalance
        %       must be given as a 'key'/value pair. The specified element
        %       must be one of the elements provided as an input. By
        %       defualt charge balance is not strictly enforced. This make
        %       the chemical solver more robust. 
        %
        %           state = model.initState(userInput, 'chargeBalance', 'Cl')
        %
        %
        % OUTPUTS:
        %   state           - A structure containing the solution to the
        %       chemical system. This includes state.masterCompoents and
        %       state.components. masterComponents contains the total
        %       element concentrations and surface functional group
        %       concentrations. components contains the species
        %       concentrations as well as the surface acitivity
        %       multipliers. Values can be retreived from state using the
        %       model.getProp() function.
        %
        %   report          - The nonlinear solver report for the chemical
        %       system. 
        %
        %   model           - The updated chemical model object.
        %
        % SEE ALSO:
        %   ChemicalModel